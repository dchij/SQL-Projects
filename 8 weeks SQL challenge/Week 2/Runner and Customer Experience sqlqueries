
------------------------------------------------------------------------------------
---------------------------------- Runner and Customer Experience Metrics -----------------------------------
------------------------------------------------------------------------------------

/* First clean the given tables */

-- Cleaning the customer_orders table
DROP TABLE IF EXISTS customer_orders_clean;
CREATE TEMP TABLE customer_orders_clean AS (
    SELECT  order_id,
            customer_id,
            pizza_id,
            CASE
                WHEN exclusions = '' THEN NULL
                WHEN exclusions = 'null' THEN NULL
                ELSE exclusions
            END AS exclusions,
            CASE
                WHEN extras = '' THEN NULL
                WHEN extras = 'null' THEN NULL
                WHEN extras = 'NaN' THEN NULL
                ELSE extras
            END AS extras,
            order_time
    FROM pizza_runner.customer_orders
);

-- Sanity check for the cleaned customer_orders table
SELECT * FROM pizza_runner.customer_orders;
| order_id | customer_id | pizza_id | exclusions | extras | order_time               |
| -------- | ----------- | -------- | ---------- | ------ | ------------------------ |
| 1        | 101         | 1        |            |        | 2020-01-01T18:05:02.000Z |
| 2        | 101         | 1        |            |        | 2020-01-01T19:00:52.000Z |
| 3        | 102         | 1        |            |        | 2020-01-02T12:51:23.000Z |
| 3        | 102         | 2        |            |        | 2020-01-02T12:51:23.000Z |
| 4        | 103         | 1        | 4          |        | 2020-01-04T13:23:46.000Z |
| 4        | 103         | 1        | 4          |        | 2020-01-04T13:23:46.000Z |
| 4        | 103         | 2        | 4          |        | 2020-01-04T13:23:46.000Z |
| 5        | 104         | 1        | null       | 1      | 2020-01-08T21:00:29.000Z |
| 6        | 101         | 2        | null       | null   | 2020-01-08T21:03:13.000Z |
| 7        | 105         | 2        | null       | 1      | 2020-01-08T21:20:29.000Z |
| 8        | 102         | 1        | null       | null   | 2020-01-09T23:54:33.000Z |
| 9        | 103         | 1        | 4          | 1, 5   | 2020-01-10T11:22:59.000Z |
| 10       | 104         | 1        | null       | null   | 2020-01-11T18:34:49.000Z |
| 10       | 104         | 1        | 2, 6       | 1, 4   | 2020-01-11T18:34:49.000Z |

---

SELECT * FROM customer_orders_clean;
| order_id | customer_id | pizza_id | exclusions | extras | order_time               |
| -------- | ----------- | -------- | ---------- | ------ | ------------------------ |
| 1        | 101         | 1        |            |        | 2020-01-01T18:05:02.000Z |
| 2        | 101         | 1        |            |        | 2020-01-01T19:00:52.000Z |
| 3        | 102         | 1        |            |        | 2020-01-02T12:51:23.000Z |
| 3        | 102         | 2        |            |        | 2020-01-02T12:51:23.000Z |
| 4        | 103         | 1        | 4          |        | 2020-01-04T13:23:46.000Z |
| 4        | 103         | 1        | 4          |        | 2020-01-04T13:23:46.000Z |
| 4        | 103         | 2        | 4          |        | 2020-01-04T13:23:46.000Z |
| 5        | 104         | 1        |            | 1      | 2020-01-08T21:00:29.000Z |
| 6        | 101         | 2        |            |        | 2020-01-08T21:03:13.000Z |
| 7        | 105         | 2        |            | 1      | 2020-01-08T21:20:29.000Z |
| 8        | 102         | 1        |            |        | 2020-01-09T23:54:33.000Z |
| 9        | 103         | 1        | 4          | 1, 5   | 2020-01-10T11:22:59.000Z |
| 10       | 104         | 1        |            |        | 2020-01-11T18:34:49.000Z |
| 10       | 104         | 1        | 2, 6       | 1, 4   | 2020-01-11T18:34:49.000Z |

---

-- Cleaning the runner_orders table
DROP TABLE IF EXISTS runner_orders_clean;
CREATE TEMP TABLE runner_orders_clean AS (
    SELECT
        order_id,
        runner_id,
        CAST(
            CASE
                WHEN pickup_time = 'null' THEN NULL
                ELSE pickup_time
            END AS TIMESTAMP
        ) AS pickup_time,
        CAST(
            CASE 
                WHEN distance = 'null' THEN NULL
                ELSE REGEXP_REPLACE(distance, '[a-z]+', '', 'g')
            END AS DECIMAL 
        )  AS distance,
        CAST(
            CASE 
                WHEN duration = 'null' THEN NULL
                ELSE REGEXP_REPLACE(duration, '[a-z]+', '', 'g')
            END AS DECIMAL 
        )  AS duration,
        CASE
            WHEN cancellation = 'null' OR cancellation = 'NaN' OR cancellation = '' THEN NULL
            ELSE cancellation
        END AS cancellation
    FROM pizza_runner.runner_orders
);

-- Sanity check for the cleaned runner_orders table
SELECT * FROM pizza_runner.runner_orders;
| order_id | runner_id | pickup_time         | distance | duration   | cancellation            |
| -------- | --------- | ------------------- | -------- | ---------- | ----------------------- |
| 1        | 1         | 2020-01-01 18:15:34 | 20km     | 32 minutes |                         |
| 2        | 1         | 2020-01-01 19:10:54 | 20km     | 27 minutes |                         |
| 3        | 1         | 2020-01-02 00:12:37 | 13.4km   | 20 mins    |                         |
| 4        | 2         | 2020-01-04 13:53:03 | 23.4     | 40         |                         |
| 5        | 3         | 2020-01-08 21:10:57 | 10       | 15         |                         |
| 6        | 3         | null                | null     | null       | Restaurant Cancellation |
| 7        | 2         | 2020-01-08 21:30:45 | 25km     | 25mins     | null                    |
| 8        | 2         | 2020-01-10 00:15:02 | 23.4 km  | 15 minute  | null                    |
| 9        | 2         | null                | null     | null       | Customer Cancellation   |
| 10       | 1         | 2020-01-11 18:50:20 | 10km     | 10minutes  | null                    |

---

SELECT * FROM runner_orders_clean;

| order_id | runner_id | pickup_time              | distance | duration | cancellation            |
| -------- | --------- | ------------------------ | -------- | -------- | ----------------------- |
| 1        | 1         | 2020-01-01T18:15:34.000Z | 20       | 32       |                         |
| 2        | 1         | 2020-01-01T19:10:54.000Z | 20       | 27       |                         |
| 3        | 1         | 2020-01-02T00:12:37.000Z | 13.4     | 20       |                         |
| 4        | 2         | 2020-01-04T13:53:03.000Z | 23.4     | 40       |                         |
| 5        | 3         | 2020-01-08T21:10:57.000Z | 10       | 15       |                         |
| 6        | 3         |                          |          |          | Restaurant Cancellation |
| 7        | 2         | 2020-01-08T21:30:45.000Z | 25       | 25       |                         |
| 8        | 2         | 2020-01-10T00:15:02.000Z | 23.4     | 15       |                         |
| 9        | 2         |                          |          |          | Customer Cancellation   |
| 10       | 1         | 2020-01-11T18:50:20.000Z | 10       | 10       |                         |

---


----------------------------------------------------------------------------------
----------------------------------- Queries --------------------------------------
----------------------------------------------------------------------------------
--1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
SELECT TO_CHAR(registration_date, 'W') AS week, COUNT(*) AS weekly_signups
FROM pizza_runner.runners
GROUP BY 1
ORDER BY 1;

| week | weekly_signups |
| ---- | -------------- |
| 1    | 2              |
| 2    | 1              |
| 3    | 1              |


--2. What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
SELECT r.runner_id, AVG(EXTRACT(HOUR FROM pickup_time - order_time) * 60
            + EXTRACT(MINUTES FROM pickup_time - order_time)
            + EXTRACT(SECONDS FROM pickup_time - order_time) / 60
            ) AS average_time
FROM customer_orders_clean c JOIN runner_orders_clean r
ON c.order_id = r.order_id
GROUP BY 1
ORDER BY 1;    

| runner_id | average_time        |
| --------- | ------------------- |
| 1         | -244.32222222222222 |
| 2         | 23.720000000000002  |
| 3         | 10.466666666666667  |


--3. Is there any relationship between the number of pizzas and how long the order takes to prepare?
SELECT c.order_id, COUNT(c.pizza_id) AS number_of_pizza,
                      AVG(EXTRACT(HOUR from r.pickup_time - c.order_time) * 60
                        + EXTRACT(MINUTES from r.pickup_time - c.order_time)
                        + EXTRACT(SECONDS from r.pickup_time - c.order_time) / 60
                        ) AS average_preparation_time
FROM customer_orders_clean c JOIN runner_orders_clean r
ON c.order_id = r.order_id
GROUP BY 1
ORDER BY 1;

| order_id | number_of_pizza | average_preparation_time |
| -------- | --------------- | ------------------------ |
| 1        | 1               | 10.533333333333333       |
| 2        | 1               | 10.033333333333333       |
| 3        | 2               | -758.7666666666667       |
| 4        | 3               | 29.283333333333335       |
| 5        | 1               | 10.466666666666667       |
| 6        | 1               |                          |
| 7        | 1               | 10.266666666666667       |
| 8        | 1               | 20.483333333333334       |
| 9        | 1               |                          |
| 10       | 2               | 15.516666666666667       |
--The number of pizzas ordered seems to be correlated to the preparation time


--4. What was the average distance travelled for each customer?
SELECT c.customer_id, ROUND(AVG(r.distance),2) AS average_distance
FROM customer_orders_clean c JOIN runner_orders_clean r
ON c.order_id = r.order_id
GROUP BY 1
ORDER BY 1;

| customer_id | average_distance |
| ----------- | ---------------- |
| 101         | 20.00            |
| 102         | 16.73            |
| 103         | 23.40            |
| 104         | 10.00            |
| 105         | 25.00            |


--5. What was the difference between the longest and shortest delivery times for all orders?
SELECT MAX(duration) - MIN(duration) AS difference
FROM runner_orders_clean; 

| difference |
| ---------- |
| 30         |


--6. What was the average speed for each runner for each delivery and do you notice any trend for these values?
SELECT runner_id, order_id, ROUND(AVG(distance/duration*60),2) AS "average speed km/hr"
FROM runner_orders_clean 
WHERE cancellation is NULL
GROUP BY 1,2; 

| runner_id | order_id | average speed km/hr |
| --------- | -------- | ------------------- |
| 1         | 1        | 37.50               |
| 1         | 2        | 44.44               |
| 1         | 3        | 40.20               |
| 1         | 10       | 60.00               |
| 2         | 4        | 35.10               |
| 2         | 7        | 60.00               |
| 2         | 8        | 93.60               |
| 3         | 5        | 40.00               |
-- Runner 2 is generally faster


--7. What is the successful delivery percentage for each runner?
SELECT runner_id, COUNT(*) AS total_orders, SUM(CASE WHEN cancellation IS NULL THEN 1 ELSE 0 END) AS successful_orders, 
CAST(SUM(CASE WHEN cancellation IS NULL THEN 1 ELSE 0 END) AS FLOAT)/COUNT(order_id)*100 AS success_percent
FROM runner_orders_clean 
GROUP BY 1
ORDER BY 1; 

| runner_id | total_orders | successful_orders | success_percent |
| --------- | ------------ | ----------------- | --------------- |
| 1         | 4            | 4                 | 100             |
| 2         | 4            | 3                 | 75              |
| 3         | 2            | 1                 | 50              |


---
