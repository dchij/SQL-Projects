------------------------------------------------------------------------------------
---------------------------------- Pizza Metrics -----------------------------------
------------------------------------------------------------------------------------

/* First clean the given tables */

-- Cleaning the customer_orders table
DROP TABLE IF EXISTS customer_orders_clean;
CREATE TEMP TABLE customer_orders_clean AS (
    SELECT  order_id,
            customer_id,
            pizza_id,
            CASE
                WHEN exclusions = '' THEN NULL
                WHEN exclusions = 'null' THEN NULL
                ELSE exclusions
            END AS exclusions,
            CASE
                WHEN extras = '' THEN NULL
                WHEN extras = 'null' THEN NULL
                WHEN extras = 'NaN' THEN NULL
                ELSE extras
            END AS extras,
            order_time
    FROM pizza_runner.customer_orders
);

-- Sanity check for the cleaned customer_orders table
SELECT * FROM pizza_runner.customer_orders;
| order_id | customer_id | pizza_id | exclusions | extras | order_time               |
| -------- | ----------- | -------- | ---------- | ------ | ------------------------ |
| 1        | 101         | 1        |            |        | 2020-01-01T18:05:02.000Z |
| 2        | 101         | 1        |            |        | 2020-01-01T19:00:52.000Z |
| 3        | 102         | 1        |            |        | 2020-01-02T12:51:23.000Z |
| 3        | 102         | 2        |            |        | 2020-01-02T12:51:23.000Z |
| 4        | 103         | 1        | 4          |        | 2020-01-04T13:23:46.000Z |
| 4        | 103         | 1        | 4          |        | 2020-01-04T13:23:46.000Z |
| 4        | 103         | 2        | 4          |        | 2020-01-04T13:23:46.000Z |
| 5        | 104         | 1        | null       | 1      | 2020-01-08T21:00:29.000Z |
| 6        | 101         | 2        | null       | null   | 2020-01-08T21:03:13.000Z |
| 7        | 105         | 2        | null       | 1      | 2020-01-08T21:20:29.000Z |
| 8        | 102         | 1        | null       | null   | 2020-01-09T23:54:33.000Z |
| 9        | 103         | 1        | 4          | 1, 5   | 2020-01-10T11:22:59.000Z |
| 10       | 104         | 1        | null       | null   | 2020-01-11T18:34:49.000Z |
| 10       | 104         | 1        | 2, 6       | 1, 4   | 2020-01-11T18:34:49.000Z |

---

SELECT * FROM customer_orders_clean;
| order_id | customer_id | pizza_id | exclusions | extras | order_time               |
| -------- | ----------- | -------- | ---------- | ------ | ------------------------ |
| 1        | 101         | 1        |            |        | 2020-01-01T18:05:02.000Z |
| 2        | 101         | 1        |            |        | 2020-01-01T19:00:52.000Z |
| 3        | 102         | 1        |            |        | 2020-01-02T12:51:23.000Z |
| 3        | 102         | 2        |            |        | 2020-01-02T12:51:23.000Z |
| 4        | 103         | 1        | 4          |        | 2020-01-04T13:23:46.000Z |
| 4        | 103         | 1        | 4          |        | 2020-01-04T13:23:46.000Z |
| 4        | 103         | 2        | 4          |        | 2020-01-04T13:23:46.000Z |
| 5        | 104         | 1        |            | 1      | 2020-01-08T21:00:29.000Z |
| 6        | 101         | 2        |            |        | 2020-01-08T21:03:13.000Z |
| 7        | 105         | 2        |            | 1      | 2020-01-08T21:20:29.000Z |
| 8        | 102         | 1        |            |        | 2020-01-09T23:54:33.000Z |
| 9        | 103         | 1        | 4          | 1, 5   | 2020-01-10T11:22:59.000Z |
| 10       | 104         | 1        |            |        | 2020-01-11T18:34:49.000Z |
| 10       | 104         | 1        | 2, 6       | 1, 4   | 2020-01-11T18:34:49.000Z |

---

-- Cleaning the runner_orders table
DROP TABLE IF EXISTS runner_orders_clean;
CREATE TEMP TABLE runner_orders_clean AS (
    SELECT
        order_id,
        runner_id,
        CAST(
            CASE
                WHEN pickup_time = 'null' THEN NULL
                ELSE pickup_time
            END AS TIMESTAMP
        ) AS pickup_time,
        CAST(
            CASE 
                WHEN distance = 'null' THEN NULL
                ELSE REGEXP_REPLACE(distance, '[a-z]+', '', 'g')
            END AS DECIMAL 
        )  AS distance,
        CAST(
            CASE 
                WHEN duration = 'null' THEN NULL
                ELSE REGEXP_REPLACE(duration, '[a-z]+', '', 'g')
            END AS DECIMAL 
        )  AS duration,
        CASE
            WHEN cancellation = 'null' OR cancellation = 'NaN' OR cancellation = '' THEN NULL
            ELSE cancellation
        END AS cancellation
    FROM pizza_runner.runner_orders
);

-- Sanity check for the cleaned runner_orders table
SELECT * FROM pizza_runner.runner_orders;
| order_id | runner_id | pickup_time         | distance | duration   | cancellation            |
| -------- | --------- | ------------------- | -------- | ---------- | ----------------------- |
| 1        | 1         | 2020-01-01 18:15:34 | 20km     | 32 minutes |                         |
| 2        | 1         | 2020-01-01 19:10:54 | 20km     | 27 minutes |                         |
| 3        | 1         | 2020-01-02 00:12:37 | 13.4km   | 20 mins    |                         |
| 4        | 2         | 2020-01-04 13:53:03 | 23.4     | 40         |                         |
| 5        | 3         | 2020-01-08 21:10:57 | 10       | 15         |                         |
| 6        | 3         | null                | null     | null       | Restaurant Cancellation |
| 7        | 2         | 2020-01-08 21:30:45 | 25km     | 25mins     | null                    |
| 8        | 2         | 2020-01-10 00:15:02 | 23.4 km  | 15 minute  | null                    |
| 9        | 2         | null                | null     | null       | Customer Cancellation   |
| 10       | 1         | 2020-01-11 18:50:20 | 10km     | 10minutes  | null                    |

---

SELECT * FROM runner_orders_clean;

| order_id | runner_id | pickup_time              | distance | duration | cancellation            |
| -------- | --------- | ------------------------ | -------- | -------- | ----------------------- |
| 1        | 1         | 2020-01-01T18:15:34.000Z | 20       | 32       |                         |
| 2        | 1         | 2020-01-01T19:10:54.000Z | 20       | 27       |                         |
| 3        | 1         | 2020-01-02T00:12:37.000Z | 13.4     | 20       |                         |
| 4        | 2         | 2020-01-04T13:53:03.000Z | 23.4     | 40       |                         |
| 5        | 3         | 2020-01-08T21:10:57.000Z | 10       | 15       |                         |
| 6        | 3         |                          |          |          | Restaurant Cancellation |
| 7        | 2         | 2020-01-08T21:30:45.000Z | 25       | 25       |                         |
| 8        | 2         | 2020-01-10T00:15:02.000Z | 23.4     | 15       |                         |
| 9        | 2         |                          |          |          | Customer Cancellation   |
| 10       | 1         | 2020-01-11T18:50:20.000Z | 10       | 10       |                         |

---


----------------------------------------------------------------------------------
----------------------------------- Queries --------------------------------------
----------------------------------------------------------------------------------
--1. How many pizzas were ordered?
SELECT COUNT(*) AS number_of_pizzas_ordered FROM customer_orders_clean;
| number_of_pizzas_ordered |
| ------------------------ |
| 14                       |


--2. How many unique customer orders were made?
SELECT COUNT(DISTINCT order_id) AS number_of_unique_customer_orders FROM customer_orders_clean;
| number_of_unique_customer_orders |
| -------------------------------- |
| 10                               |


--3. How many successful orders were delivered by each runner?
SELECT runner_id, COUNT(*) AS number_of_successful_orders 
FROM runner_orders_clean 
WHERE cancellation IS NULL
GROUP BY runner_id;
| runner_id | number_of_successful_orders |
| --------- | --------------------------- |
| 1         | 4                           |
| 2         | 3                           |
| 3         | 1                           |


--4. How many of each type of pizza was delivered?
SELECT c.pizza_id, COUNT(*) AS number_of_pizza_delivered
FROM customer_orders_clean c JOIN runner_orders_clean r
ON c.order_id = r.order_id
WHERE r.cancellation IS NULL
GROUP BY c.pizza_id;
| pizza_id | number_of_pizza_delivered |
| -------- | ------------------------- |
| 1        | 9                         |
| 2        | 3                         |


--5. How many Vegetarian and Meatlovers were ordered by each customer?
SELECT c.customer_id, SUM(CASE WHEN p.pizza_name = 'Meatlovers' THEN 1 ELSE 0 END) AS "Meatlovers",
                      SUM(CASE WHEN p.pizza_name = 'Vegetarian' THEN 1 ELSE 0 END) AS "Vegetarian"
FROM customer_orders_clean c JOIN pizza_runner.pizza_names p
ON p.pizza_id = c.pizza_id
GROUP BY 1
ORDER BY 1;
| customer_id | Meatlovers | Vegetarian |
| ----------- | ---------- | ---------- |
| 101         | 2          | 1          |
| 102         | 2          | 1          |
| 103         | 3          | 1          |
| 104         | 3          | 0          |
| 105         | 0          | 1          |


--6. What was the maximum number of pizzas delivered in a single order?
SELECT c.order_id, COUNT(*) AS max_number_of_pizza_delivered
FROM customer_orders_clean c JOIN runner_orders_clean r
ON c.order_id = r.order_id
WHERE r.cancellation IS NULL
GROUP BY c.order_id
ORDER BY 2 DESC;
| order_id | max_number_of_pizza_delivered |
| -------- | ----------------------------- |
| 4        | 3                             |
| 3        | 2                             |
| 10       | 2                             |
| 7        | 1                             |
| 8        | 1                             |
| 5        | 1                             |
| 2        | 1                             |
| 1        | 1                             |


--7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
SELECT c.customer_id, 
       SUM(CASE WHEN c.exclusions IS NOT NULL OR c.extras IS NOT NULL THEN 1 ELSE 0 END) AS "Modified orders", 
       SUM(CASE WHEN c.exclusions IS NULL AND c.extras IS NULL THEN 1 ELSE 0 END) AS "Unmodified orders" 
FROM customer_orders_clean c JOIN runner_orders_clean r
ON c.order_id = r.order_id
WHERE r.cancellation IS NULL
GROUP BY 1;
| customer_id | Modified orders | Unmodified orders |
| ----------- | --------------- | ----------------- |
| 101         | 0               | 2                 |
| 102         | 0               | 3                 |
| 103         | 3               | 0                 |
| 104         | 2               | 1                 |
| 105         | 1               | 0                 |


--8. How many pizzas were delivered that had both exclusions and extras?
SELECT COUNT(*) AS "exclusions and extras"
FROM customer_orders_clean c JOIN runner_orders_clean r
ON c.order_id = r.order_id
WHERE (c.exclusions IS NOT NULL AND c.extras IS NOT NULL)
AND (r.cancellation IS NULL);
| exclusions and extras |
| --------------------- |
| 1                     |


--9. What was the total volume of pizzas ordered for each hour of the day?
SELECT EXTRACT(HOUR FROM order_time) AS hour, COUNT(*) AS orders_per_hour
FROM customer_orders_clean
GROUP BY hour
ORDER BY hour;
| hour | orders_per_hour |
| ---- | --------------- |
| 11   | 1               |
| 12   | 2               |
| 13   | 3               |
| 18   | 3               |
| 19   | 1               |
| 21   | 3               |
| 23   | 1               |


--10. What was the volume of orders for each day of the week?
SELECT TO_CHAR(order_time, 'Day') AS day, COUNT(*) AS orders_per_day
FROM customer_orders_clean
GROUP BY 1
ORDER BY 1;
| day       | orders_per_day |
| --------- | -------------- |
| Friday    | 1              |
| Saturday  | 5              |
| Thursday  | 3              |
| Wednesday | 5              |

---



