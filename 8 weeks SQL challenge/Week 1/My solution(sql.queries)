/* --------------------
   Case Study Questions
   --------------------*/

-- 1. What is the total amount each customer spent at the restaurant?
-- 2. How many days has each customer visited the restaurant?
-- 3. What was the first item from the menu purchased by each customer?
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
-- 5. Which item was the most popular for each customer?
-- 6. Which item was purchased first by the customer after they became a member?
-- 7. Which item was purchased just before the customer became a member?
-- 8. What is the total items and amount spent for each member before they became a member?
-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?


---
**Query #1**
-- 1. What is the total amount each customer spent at the restaurant?
SELECT
  	s.customer_id, SUM(m.price) AS "total amount spent"
FROM sales s 
JOIN menu m ON s.product_id = m.product_id
      GROUP BY s.customer_id
      ORDER BY 2 DESC;
      
| customer_id | total amount spent |
| ----------- | ------------------ |
| A           | 76                 |
| B           | 74                 |
| C           | 36                 |


---
**Query #2**
-- 2. How many days has each customer visited the restaurant?
SELECT
  	s.customer_id, COUNT(DISTINCT s.order_date) AS "no of days visited"
FROM sales s 
      GROUP BY s.customer_id 
      ORDER BY 2 DESC;
      
| customer_id | no of days visited |
| ----------- | ------------------ |
| B           | 6                  |
| A           | 4                  |
| C           | 2                  |


---
**Query #3**
-- 3. What was the first item from the menu purchased by each customer?
SELECT customer_id, product_name 
FROM (
        SELECT s.customer_id, m.product_name, RANK() OVER(PARTITION BY s.customer_id ORDER BY s.order_date ASC) AS ranking 
            FROM sales s 
            JOIN menu m ON s.product_id = m.product_id
      ) AS ranked
WHERE ranked.ranking = 1;

| customer_id | product_name |
| ----------- | ------------ |
| A           | curry        |
| A           | sushi        |
| B           | curry        |
| C           | ramen        |
| C           | ramen        |


---
**Query #4**
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT
  	m.product_id, m.product_name, COUNT(s.customer_id) AS "no of times purchased"
FROM sales s 
JOIN menu m ON s.product_id = m.product_id
      GROUP BY m.product_id, m.product_name
      ORDER BY 3 DESC
      LIMIT 1; 
      
| product_id | product_name | no of times purchased |
| ---------- | ------------ | --------------------- |
| 3          | ramen        | 8                     |


---
**Query #5**
-- 5. Which item was the most popular for each customer?
WITH ranked AS (
                 SELECT customer_id, product_name, RANK() OVER(PARTITION BY customer_id ORDER BY num DESC) AS ranking
                               FROM (SELECT
  	                                 s.customer_id, m.product_name, count(m.product_name) num
                                        FROM sales s 
                                        JOIN menu m ON s.product_id = m.product_id
                                        GROUP BY m.product_name, s.customer_id) AS df
               )
SELECT customer_id, product_name
FROM ranked
WHERE ranked.ranking = 1;

| customer_id | product_name |
| ----------- | ------------ |
| A           | ramen        |
| B           | curry        |
| B           | sushi        |
| B           | ramen        |
| C           | ramen        |


---
**Query #6**
-- 6. Which item was purchased first by the customer after they became a member?
SELECT customer_id, product_name 
FROM (
        SELECT
  	    c.customer_id, m.product_name, RANK() OVER(PARTITION BY c.customer_id ORDER BY s.order_date ASC) AS ranked
            FROM members c JOIN sales s ON c.customer_id = s.customer_id
            JOIN menu m ON s.product_id = m.product_id
            WHERE s.order_date >= c.join_date
     ) AS ranking
WHERE ranking.ranked = 1;  

| customer_id | product_name |
| ----------- | ------------ |
| A           | curry        |
| B           | sushi        |


---
**Query #7**
-- 7. Which item was purchased just before the customer became a member?
SELECT customer_id, product_name 
FROM (
        SELECT s.customer_id, m.product_name, RANK() OVER(PARTITION BY s.customer_id ORDER BY s.order_date DESC) AS ranking 
            FROM members c JOIN sales s ON c.customer_id = s.customer_id
            JOIN menu m ON s.product_id = m.product_id
            WHERE s.order_date < c.join_date
     ) AS ranked 
WHERE ranked.ranking = 1;
     
| customer_id | product_name |
| ----------- | ------------ |
| A           | sushi        |
| A           | curry        |
| B           | sushi        |


---
**Query #8**
-- 8. What is the total items and amount spent for each member before they became a member?
SELECT
  	s.customer_id, COUNT(m.product_name) "total items", SUM(m.price) "amount"
FROM members c JOIN sales s ON  c.customer_id = s.customer_id
JOIN menu m ON s.product_id = m.product_id
      WHERE s.order_date < c.join_date
      GROUP BY s.customer_id 
      ORDER BY 1;
     
| customer_id | total items | amount |
| ----------- | ----------- | ------ |
| A           | 2           | 25     |
| B           | 3           | 40     |


---
**Query #9**
 -- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
 WITH loyalty_points AS (
                         SELECT
  	                     s.customer_id,  m.product_name, SUM(m.price) AS "total amount spent", 
                         CASE WHEN m.product_name = 'sushi' THEN SUM(m.price) * 20 
                         ELSE SUM(m.price) * 10 
                         END AS points
                               FROM sales s JOIN menu m ON s.product_id = m.product_id
                               GROUP BY s.customer_id, m.product_name
                        )
SELECT customer_id, SUM(points) AS "total points"
FROM loyalty_points
GROUP BY customer_id
ORDER BY 1;

| customer_id | total points |
| ----------- | ------------ |
| A           | 860          |
| B           | 940          |
| C           | 360          |


---
**Query #10**
-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
SELECT
  	s.customer_id, SUM(CASE WHEN m.product_name ='sushi' THEN m.price * 20
                            WHEN s.order_date BETWEEN c.join_date AND c.join_date + interval '1 week' THEN m.price * 20 
                            ELSE m.price * 10 END) AS points 
FROM members c JOIN sales s ON c.customer_id = s.customer_id 
JOIN menu m ON s.product_id = m.product_id
WHERE order_date  <= '2021-01-31'
GROUP BY s.customer_id
ORDER BY 1;

| customer_id | points |
| ----------- | ------ |
| A           | 1370   |
| B           | 940    |

---
-- #################################
-- Bonus Questions

**Query #11**
-- Join all things
SELECT
  	s.customer_id, 
   TO_CHAR(s.order_date :: DATE, 'yyyy-mm-dd') AS order_date,  
   m.product_name, 
   m.price, 
   CASE WHEN s.order_date >= c.join_date THEN 'Y' ELSE 'N' END AS member
FROM members c RIGHT JOIN sales s ON c.customer_id = s.customer_id
JOIN menu m ON s.product_id = m.product_id
ORDER BY 1 ASC, 2 ASC;

| customer_id | order_date | product_name | price | member |
| ----------- | ---------- | ------------ | ----- | ------ |
| A           | 2021-01-01 | sushi        | 10    | N      |
| A           | 2021-01-01 | curry        | 15    | N      |
| A           | 2021-01-07 | curry        | 15    | Y      |
| A           | 2021-01-10 | ramen        | 12    | Y      |
| A           | 2021-01-11 | ramen        | 12    | Y      |
| A           | 2021-01-11 | ramen        | 12    | Y      |
| B           | 2021-01-01 | curry        | 15    | N      |
| B           | 2021-01-02 | curry        | 15    | N      |
| B           | 2021-01-04 | sushi        | 10    | N      |
| B           | 2021-01-11 | sushi        | 10    | Y      |
| B           | 2021-01-16 | ramen        | 12    | Y      |
| B           | 2021-02-01 | ramen        | 12    | Y      |
| C           | 2021-01-01 | ramen        | 12    | N      |
| C           | 2021-01-01 | ramen        | 12    | N      |
| C           | 2021-01-07 | ramen        | 12    | N      |



---
**Query #12**
-- Rank all the things
SELECT *, 
CASE WHEN member = 'Y' THEN RANK() OVER(PARTITION BY customer_id, member ORDER BY order_date) ELSE NULL END AS ranking
    FROM (
            SELECT s.customer_id, TO_CHAR(s.order_date :: DATE, 'yyyy-mm-dd') AS order_date,  
            m.product_name, m.price, CASE WHEN s.order_date >= c.join_date THEN 'Y' ELSE 'N' END AS member
                   FROM members c RIGHT JOIN sales s ON c.customer_id = s.customer_id
                   JOIN menu m ON s.product_id = m.product_id
                   ORDER BY customer_id ASC, order_date ASC
         ) AS GG;

| customer_id | order_date | product_name | price | member | ranking |
| ----------- | ---------- | ------------ | ----- | ------ | ------- |
| A           | 2021-01-01 | sushi        | 10    | N      |         |
| A           | 2021-01-01 | curry        | 15    | N      |         |
| A           | 2021-01-07 | curry        | 15    | Y      | 1       |
| A           | 2021-01-10 | ramen        | 12    | Y      | 2       |
| A           | 2021-01-11 | ramen        | 12    | Y      | 3       |
| A           | 2021-01-11 | ramen        | 12    | Y      | 3       |
| B           | 2021-01-01 | curry        | 15    | N      |         |
| B           | 2021-01-02 | curry        | 15    | N      |         |
| B           | 2021-01-04 | sushi        | 10    | N      |         |
| B           | 2021-01-11 | sushi        | 10    | Y      | 1       |
| B           | 2021-01-16 | ramen        | 12    | Y      | 2       |
| B           | 2021-02-01 | ramen        | 12    | Y      | 3       |
| C           | 2021-01-01 | ramen        | 12    | N      |         |
| C           | 2021-01-01 | ramen        | 12    | N      |         |
| C           | 2021-01-07 | ramen        | 12    | N      |         |

---
